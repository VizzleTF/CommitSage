name: Create Release and Publish to Marketplaces

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm ci
        sudo apt-get update && sudo apt-get install -y jq

    - name: Set API Key
      run: |
        mkdir -p src/constants
        echo "export const AMPLITUDE_API_KEY = '${{ secrets.AMPLITUDE_API_KEY }}';" > src/constants/apiKeys.ts

    - name: Build
      run: npm run compile

    - name: Package Extension
      run: npm run package

    - name: Get version from package.json
      id: get_version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: release_notes
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0)
        SECOND_LATEST_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        CHANGES=$(git log $SECOND_LATEST_TAG..$LATEST_TAG --pretty=format:"- %s")
        # –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ "Changes:"
        CLEAN_CHANGES=$(echo "$CHANGES" | sed 's/\\n/\n/g' | sed 's/^Changes://g')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript
        ESCAPED_CHANGES=$(echo "$CLEAN_CHANGES" | sed 's/`/\\`/g')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
        if echo "$CLEAN_CHANGES" | grep -q "security patch release"; then
          PREFIX="*üîí Security Update!*"
          RELEASE_NOTE="This release contains important security updates."
        else
          PREFIX="*üöÄ New Release!*"
          RELEASE_NOTE=""
        fi
        
        # AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è changelog —Å –ø–æ–º–æ—â—å—é Gemini
        if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é changelog..."
          
          echo '{
            "contents": [
              {
                "parts": [
                  {
                    "text": "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π changelog –¥–ª—è —Ä–µ–ª–∏–∑–∞ VS Code —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è. –í—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏. –ú–∞–∫—Å–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤. –§–æ—Ä–º–∞—Ç: ‚Ä¢ –æ–ø–∏—Å–∞–Ω–∏–µ\n\nChangelog:\nCHANGELOG_PLACEHOLDER"
                  }
                ]
              }
            ],
            "generationConfig": {
              "temperature": 0.3,
              "maxOutputTokens": 200
            }
          }' > ai_prompt.json
          
          # –ó–∞–º–µ–Ω—è–µ–º placeholder –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π changelog
          ESCAPED_CHANGELOG=$(echo "$CLEAN_CHANGES" | sed 's/"/\\"/g' | sed 's/$/\\n/g' | tr -d '\n' | sed 's/\\n$//')
          sed -i "s|CHANGELOG_PLACEHOLDER|$ESCAPED_CHANGELOG|g" ai_prompt.json
          
          # –í—ã–∑—ã–≤–∞–µ–º Gemini API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @ai_prompt.json)
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')
          
          echo "üìä Gemini API HTTP —Å—Ç–∞—Ç—É—Å: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            AI_SUMMARY=$(echo "$RESPONSE_BODY" | jq -r '.candidates[0].content.parts[0].text // empty' 2>/dev/null)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å AI –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if [ -n "$AI_SUMMARY" ] && [ "$AI_SUMMARY" != "null" ] && [ "$AI_SUMMARY" != "empty" ]; then
              echo "‚úÖ AI —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
              SUMMARIZED_CHANGES="$AI_SUMMARY"
            else
              echo "‚ö†Ô∏è AI –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
              SUMMARIZED_CHANGES=$(echo "$CLEAN_CHANGES" | head -5 | sed 's/^- /‚Ä¢ /')
            fi
          else
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini API (HTTP: $HTTP_STATUS), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"
            echo "–û—Ç–≤–µ—Ç API: $(echo "$RESPONSE_BODY" | head -c 200)..."
            SUMMARIZED_CHANGES=$(echo "$CLEAN_CHANGES" | head -5 | sed 's/^- /‚Ä¢ /')
          fi
          
          # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          rm -f ai_prompt.json
        else
          echo "üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é changelog"
          SUMMARIZED_CHANGES=$(echo "$CLEAN_CHANGES" | head -5 | sed 's/^- /‚Ä¢ /')
        fi
        
        # –°–æ–∑–¥–∞–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
        printf '%s\n' \
          "$PREFIX" \
          "" \
          "üöÄ **CommitSage ${LATEST_TAG}**" \
          "" \
          "üìã **What's New:**" \
          "$SUMMARIZED_CHANGES" \
          "" \
          "üì¶ **Download:**" \
          "‚Ä¢ [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=VizzleTF.geminicommit)" \
          "‚Ä¢ [Open VSX Registry](https://open-vsx.org/extension/VizzleTF/geminicommit)" \
          "" \
          "üí¨ [Join community chat](https://t.me/gemini_commit)" \
          "#CommitSage #vscode #ai" > telegram_message.txt
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        MSG_LENGTH=$(wc -c < telegram_message.txt)
        if [ $MSG_LENGTH -gt 4000 ]; then
          echo "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ($MSG_LENGTH —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º..."
          head -c 3900 telegram_message.txt > telegram_message_short.txt
          echo "..." >> telegram_message_short.txt
          mv telegram_message_short.txt telegram_message.txt
        fi
        
        echo "TELEGRAM_MSG<<EOF" >> $GITHUB_OUTPUT
        cat telegram_message.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        if [ -n "$RELEASE_NOTE" ]; then
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTE" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Changes:" >> $GITHUB_OUTPUT
          echo "$ESCAPED_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "Changes:" >> $GITHUB_OUTPUT
          echo "$ESCAPED_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { repo: { owner, repo }, sha } = context;
          const tag = context.ref.substring(10); // remove 'refs/tags/'
          console.log(`Creating release for version ${process.env.VERSION}`);
          
          // Get release notes and sanitize any backtick characters 
          const releaseNotes = `${{ steps.release_notes.outputs.NOTES }}`.replace(/`/g, '\\`');
          
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: releaseNotes,
            draft: false,
            prerelease: false
          });
          
          const vsixFile = `geminicommit-${process.env.VERSION}.vsix`;
          console.log(`Looking for file: ${vsixFile}`);
          
          if (fs.existsSync(vsixFile)) {
            const asset = await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: release.data.id,
              name: vsixFile,
              data: fs.readFileSync(vsixFile)
            });
            console.log(`Asset uploaded: ${asset.data.browser_download_url}`);
          } else {
            console.error(`File not found: ${vsixFile}`);
            core.setFailed(`VSIX file not found: ${vsixFile}`);
          }

    - name: Publish to Visual Studio Marketplace
      env:
        VSCE_PAT: ${{ secrets.VS_MARKETPLACE_TOKEN }}
      run: npx vsce publish -p $VSCE_PAT

    - name: Install ovsx CLI
      run: npm install -g ovsx

    - name: Publish to Open VSX Registry
      env:
        OVSX_PAT: ${{ secrets.OPEN_VSX_TOKEN }}
      run: ovsx publish -p $OVSX_PAT

    - name: Send Telegram Notification
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        format: markdown
        message_file: telegram_message.txt

    - name: Notify on Security Release
      if: ${{ contains(steps.release_notes.outputs.NOTES, 'üîí Security Patch Release') }}
      uses: actions/github-script@v7
      with:
        script: |
          // Sanitize release notes to handle backticks properly
          const releaseNotes = `${{ steps.release_notes.outputs.NOTES }}`.replace(/`/g, '\\`');
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Release v${process.env.VERSION} Published`,
            body: `A new security patch release v${process.env.VERSION} has been published to address critical vulnerabilities.
                  
                  Release Notes:
                  ${releaseNotes}
                  
                  The extension has been automatically updated in the Visual Studio Marketplace.`,
            labels: ['security']
          });