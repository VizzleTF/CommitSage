name: Create Release and Publish to Marketplace

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm ci

    - name: Set API Key
      run: |
        mkdir -p src/constants
        echo "export const AMPLITUDE_API_KEY = '${{ secrets.AMPLITUDE_API_KEY }}';" > src/constants/apiKeys.ts

    - name: Build
      run: npm run compile

    - name: Package Extension
      run: npm run package

    - name: Get version from package.json
      id: get_version
      run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

    - name: Generate Release Notes
      id: release_notes
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0)
        SECOND_LATEST_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ—á–∏—â–∞–µ–º –µ–≥–æ
        CHANGES=$(git log $SECOND_LATEST_TAG..$LATEST_TAG --pretty=format:"- %s")
        # –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ "Changes:"
        CLEAN_CHANGES=$(echo "$CHANGES" | sed 's/\\n/\n/g' | sed 's/^Changes://g')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript
        ESCAPED_CHANGES=$(echo "$CLEAN_CHANGES" | sed 's/`/\\`/g')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–ª–∏–∑–∞
        if echo "$CLEAN_CHANGES" | grep -q "security patch release"; then
          PREFIX="*üîí Security Update!*"
          RELEASE_NOTE="This release contains important security updates."
        else
          PREFIX="*üöÄ New Release!*"
          RELEASE_NOTE=""
        fi
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        cat << EOF > telegram_message.txt
        $PREFIX

        CommitSage _${LATEST_TAG}_

        Changes:
        $CLEAN_CHANGES

        [Download from Marketplace](https://marketplace.visualstudio.com/items?itemName=VizzleTF.geminicommit)

        Join our [community chat](https://t.me/gemini_commit) for discussions and support!
        #vscode #CommitSage #update #git #ai #gemini #developer #tools #llm
        EOF
        
        echo "TELEGRAM_MSG<<EOF" >> $GITHUB_OUTPUT
        cat telegram_message.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        if [ -n "$RELEASE_NOTE" ]; then
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTE" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Changes:" >> $GITHUB_OUTPUT
          echo "$ESCAPED_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "Changes:" >> $GITHUB_OUTPUT
          echo "$ESCAPED_CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ steps.get_version.outputs.VERSION }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const { repo: { owner, repo }, sha } = context;
          const tag = context.ref.substring(10); // remove 'refs/tags/'
          console.log(`Creating release for version ${process.env.VERSION}`);
          
          // Get release notes and sanitize any backtick characters 
          const releaseNotes = `${{ steps.release_notes.outputs.NOTES }}`.replace(/`/g, '\\`');
          
          const release = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: tag,
            name: `Release ${tag}`,
            body: releaseNotes,
            draft: false,
            prerelease: false
          });
          
          const vsixFile = `geminicommit-${process.env.VERSION}.vsix`;
          console.log(`Looking for file: ${vsixFile}`);
          
          if (fs.existsSync(vsixFile)) {
            const asset = await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: release.data.id,
              name: vsixFile,
              data: fs.readFileSync(vsixFile)
            });
            console.log(`Asset uploaded: ${asset.data.browser_download_url}`);
          } else {
            console.error(`File not found: ${vsixFile}`);
            core.setFailed(`VSIX file not found: ${vsixFile}`);
          }

    - name: Publish to Visual Studio Marketplace
      env:
        VSCE_PAT: ${{ secrets.VS_MARKETPLACE_TOKEN }}
      run: npx vsce publish -p $VSCE_PAT

    - name: Send Telegram Notification
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        format: markdown
        message_file: telegram_message.txt

    - name: Notify on Security Release
      if: ${{ contains(steps.release_notes.outputs.NOTES, 'üîí Security Patch Release') }}
      uses: actions/github-script@v7
      with:
        script: |
          // Sanitize release notes to handle backticks properly
          const releaseNotes = `${{ steps.release_notes.outputs.NOTES }}`.replace(/`/g, '\\`');
          
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security Release v${process.env.VERSION} Published`,
            body: `A new security patch release v${process.env.VERSION} has been published to address critical vulnerabilities.
                  
                  Release Notes:
                  ${releaseNotes}
                  
                  The extension has been automatically updated in the Visual Studio Marketplace.`,
            labels: ['security']
          });