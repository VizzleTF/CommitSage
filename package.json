{
    "name": "geminicommit",
    "displayName": "Gemini Commit",
    "description": "Free AI commit messages using Gemini or custom LLM",
    "version": "1.8.2",
    "publisher": "VizzleTF",
    "repository": {
        "type": "git",
        "url": "https://github.com/VizzleTF/GeminiCommit.git"
    },
    "bugs": {
        "url": "https://github.com/VizzleTF/GeminiCommit/issues"
    },
    "engines": {
        "vscode": "^1.93.0"
    },
    "categories": [
        "Machine Learning",
        "Programming Languages",
        "AI"
    ],
    "tags": [
        "Machine Learning",
        "Programming Languages",
        "AI Assistant",
        "AI",
        "Autocommit",
        "LLM",
        "Git"
    ],
    "activationEvents": [
        "onCommand:geminicommit.generateCommitMessage",
        "onView:geminiCommitView"
    ],
    "icon": "icon.png",
    "main": "./dist/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "geminicommit.generateCommitMessage",
                "title": "GeminiCommit: Generate Message",
                "icon": "$(rocket)"
            },
            {
                "command": "geminicommit.setApiKey",
                "title": "GeminiCommit: Set Gemini API Key"
            },
            {
                "command": "geminicommit.setCustomApiKey",
                "title": "GeminiCommit: Set Custom API Key"
            }
        ],
        "menus": {
            "scm/title": [
                {
                    "when": "scmProvider == git",
                    "command": "geminicommit.generateCommitMessage",
                    "group": "navigation"
                }
            ]
        },
        "views": {
            "scm": [
                {
                    "id": "geminiCommitView",
                    "name": "GeminiCommit"
                }
            ]
        },
        "configuration": {
            "title": "GeminiCommit",
            "properties": {
                "geminiCommit.commit.promptForRefs": {
                    "type": "boolean",
                    "default": false,
                    "description": "Prompt for entering refs (e.g., issue numbers) when generating commit messages",
                    "order": 1
                },
                "geminiCommit.commit.commitLanguage": {
                    "type": "string",
                    "enum": [
                        "english",
                        "russian"
                    ],
                    "default": "english",
                    "description": "Language for generated commit messages",
                    "order": 2
                },
                "geminiCommit.commit.commitFormat": {
                    "type": "string",
                    "enum": [
                        "conventional",
                        "angular",
                        "karma",
                        "semantic",
                        "emoji"
                    ],
                    "enumDescriptions": [
                        "Description:\ntype(scope): description\n\nbody\n\nfooter",
                        "Description:\ntype(scope): short summary\n\nbody\n\nfooter",
                        "Description:\ntype(scope): message",
                        "Description:\ntype: message",
                        "Description:\n:emoji: message"
                    ],
                    "default": "conventional",
                    "description": "Format style for commit messages",
                    "order": 3
                },
                "geminiCommit.commit.useCustomInstructions": {
                    "type": "boolean",
                    "default": false,
                    "description": "Use custom instructions for commit message generation",
                    "order": 4
                },
                "geminiCommit.commit.customInstructions": {
                    "type": "string",
                    "default": "",
                    "description": "Custom instructions for commit message generation (used when commitMessageLength is set to 'custom')",
                    "order": 5
                },
                "geminiCommit.commit.onlyStagedChanges": {
                    "type": "boolean",
                    "default": false,
                    "description": "Generate commit message only for staged changes",
                    "order": 6
                },
                "geminiCommit.gemini.model": {
                    "type": "string",
                    "enum": [
                        "gemini-1.0-pro",
                        "gemini-1.5-pro",
                        "gemini-1.5-flash",
                        "gemini-2.0-flash-exp"
                    ],
                    "default": "gemini-1.5-flash",
                    "description": "Select Gemini model for commit message generation",
                    "order": 7
                },
                "geminiCommit.custom.useCustomEndpoint": {
                    "type": "boolean",
                    "default": false,
                    "description": "Use a custom endpoint for AI-generated commit messages",
                    "order": 8
                },
                "geminiCommit.custom.endpoint": {
                    "type": "string",
                    "default": "",
                    "description": "Custom endpoint URL for AI-generated commit messages",
                    "order": 9
                },
                "geminiCommit.custom.model": {
                    "type": "string",
                    "default": "",
                    "description": "Model name to use with the custom endpoint",
                    "order": 10
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -p ./",
        "watch": "tsc -watch -p ./",
        "pretest": "npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "lint:fix": "eslint src --ext ts --fix",
        "package": "vsce package"
    },
    "devDependencies": {
        "@types/glob": "^8.1.0",
        "@types/mocha": "^10.0.7",
        "@types/node": "^22.10.3",
        "@types/vscode": "^1.93.0",
        "@typescript-eslint/eslint-plugin": "^7.0.0",
        "@typescript-eslint/parser": "^7.18.0",
        "@vscode/test-electron": "^2.3.9",
        "@vscode/vsce": "^3.1.0",
        "eslint": "^8.56.0",
        "glob": "^11.0.0",
        "mocha": "^10.2.0",
        "typescript": "^5.4.2"
    },
    "dependencies": {
        "axios": "^1.6.8"
    }
}